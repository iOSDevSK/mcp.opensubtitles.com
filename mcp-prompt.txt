# OpenSubtitles MCP Server Development Prompt

Create a TypeScript/Node.js-based MCP (Model Context Protocol) server for OpenSubtitles API integration that will be deployed at `mcp.opensubtitles.com`. The server should provide subtitle search and download functionality with a freemium model, using your existing Kong gateway at api.opensubtitles.com for all API management.

## Project Requirements

### Core Functionality
- **MCP Server**: Implement using TypeScript MCP SDK (@modelcontextprotocol/sdk)
- **OpenSubtitles API Integration**: Use api.opensubtitles.com (your existing Kong gateway)
- **Rate Limiting**: Leverage existing Kong configuration for download limits (search unlimited)
- **Architecture**: MCP Server → Kong Gateway (api.opensubtitles.com) → OpenSubtitles API
- **Domain**: Deploy at mcp.opensubtitles.com (no subdomains, use paths for different endpoints)
- **NPM Package**: Distribute as `@opensubtitles/mcp-server` for easy `npx` installation
- **Freemium Model**: Search operations unlimited, downloads limited via Kong rate limiting

### MCP Tools to Implement (3 tools total)

1. **search_subtitles**
   - Parameters: All OpenSubtitles API search parameters including:
     - `query` (string): Text search query
     - `imdb_id` (number): IMDB ID
     - `tmdb_id` (number): TMDB ID  
     - `parent_imdb_id` (number): For TV series
     - `parent_tmdb_id` (number): For TV series
     - `season_number` (number): TV season
     - `episode_number` (number): TV episode
     - `year` (number): Release year
     - `moviehash` (string): File hash for exact matching
     - `moviebytesize` (number): File size in bytes
     - `languages` (string): Comma-separated language codes
     - `machine_translated` (string): Include machine translated subtitles
     - `ai_translated` (string): Include AI translated subtitles
     - `hearing_impaired` (string): Include hearing impaired subtitles
     - `foreign_parts_only` (string): Include foreign parts only
     - `trusted_sources` (string): Only trusted sources
     - `order_by` (string): Sort order
     - `order_direction` (string): asc/desc
   - Search using any combination of the above parameters (unlimited via Kong)
   - Return: comprehensive subtitle results with all metadata (uploader, ratings, download counts, file details)

2. **download_subtitle**
   - Parameters: subtitle_id, format (srt, ass, vtt), user_api_key (optional)
   - Download subtitle content (rate limited via Kong based on auth)
   - Return: subtitle text content

3. **calculate_file_hash**
   - Parameters: file_path
   - Calculate OpenSubtitles hash for movie files (local operation)
   - Return: hash and file size for use in search_subtitles moviehash parameter

### Technical Architecture

#### Project Structure
```
mcp-opensubtitles/
├── src/
│   ├── index.ts               # Main MCP server entry point
│   ├── server.ts              # MCP server implementation
│   ├── api-client.ts          # Kong gateway client wrapper
│   ├── tools/                 # MCP tool implementations
│   │   ├── search-subtitles.ts  # Comprehensive search with all API params and metadata
│   │   ├── download-subtitle.ts
│   │   └── calculate-file-hash.ts
│   └── utils/                 # Helper functions
│       ├── hash-calculator.ts
│       └── subtitle-parser.ts
├── package.json
├── tsconfig.json
├── .npmignore
├── build.js
├── evals/
│   └── evals.ts              # Testing scenarios
└── README.md
```

#### Dependencies
- `@modelcontextprotocol/sdk` - Official MCP SDK for TypeScript
- `axios` - HTTP client for Kong gateway communication
- `zod` - Schema validation and type safety
- `dotenv` - Environment configuration
- `crypto` - Built-in Node.js module for file hashing
- `@types/node` - TypeScript definitions

**Note**: No Redis or rate limiting libraries needed as Kong handles all rate limiting

### NPM Package Configuration

#### Package.json Setup
```json
{
  "name": "@opensubtitles/mcp-server",
  "version": "1.0.0",
  "description": "MCP server for OpenSubtitles API integration",
  "main": "dist/index.js",
  "bin": {
    "mcp-opensubtitles": "dist/index.js"
  },
  "scripts": {
    "build": "tsc && node build.js",
    "watch": "tsc --watch",
    "dev": "npm run build && node dist/index.js",
    "test": "npm run build && npm run test:evals",
    "test:evals": "npx mcp-eval src/evals/evals.ts dist/index.js",
    "inspector": "npm run build && npx @modelcontextprotocol/inspector dist/index.js",
    "prepublish": "npm run build"
  },
  "keywords": ["mcp", "subtitles", "opensubtitles", "claude"],
  "files": ["dist", "README.md", "LICENSE"],
  "publishConfig": {
    "access": "public"
  }
}
```

#### Installation Methods
1. **Direct npx usage** (recommended for users):
   ```bash
   npx @opensubtitles/mcp-server
   ```

2. **Claude Desktop configuration**:
   ```json
   {
     "mcpServers": {
       "opensubtitles": {
         "command": "npx",
         "args": ["-y", "@opensubtitles/mcp-server"]
       }
     }
   }
   ```

3. **Via mcp-get**:
   ```bash
   npx @michaellatman/mcp-get@latest install @opensubtitles/mcp-server
   ```

### TypeScript Configuration

#### tsconfig.json
```json
{
  "compilerOptions": {
    "target": "ES2022",
    "module": "ESNext",
    "moduleResolution": "node",
    "outDir": "dist",
    "rootDir": "src",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "declaration": true,
    "declarationMap": true,
    "sourceMap": true
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist"]
}
```

### API Integration Details

#### Kong Gateway Integration
- Base URL: `https://api.opensubtitles.com` (your existing Kong gateway)
- All requests proxied through Kong to OpenSubtitles API
- Rate limiting handled by Kong configuration
- API key management via Kong consumers

#### Request Flow
```typescript
// Search requests with full API parameter support (unlimited via Kong)
const searchResponse = await axios.get('https://api.opensubtitles.com/subtitles', {
  params: {
    query: "The Matrix",
    year: 1999,
    languages: "en",
    imdb_id: 133093,
    // OR for exact file matching:
    moviehash: "8e245d9679d31e12",
    moviebytesize: 12909756,
    // OR for TV shows:
    parent_imdb_id: 944947,
    season_number: 1,
    episode_number: 5
  }
});

// Download requests (rate limited by Kong)
const downloadResponse = await axios.post('https://api.opensubtitles.com/download', {
  file_id: subtitleId
}, {
  headers: userApiKey ? 
    { 'Authorization': `Bearer ${userApiKey}` } : 
    { 'X-Anonymous-Request': 'true' }
});
```

#### Kong Response Handling
- **200**: Successful request
- **429**: Rate limit exceeded (Kong enforcement)
- **401**: Invalid API key
- **503**: OpenSubtitles API unavailable

#### Rate Limiting Strategy
- **Anonymous users**: 0 downloads per day (Kong enforced)
- **API key users**: User's OpenSubtitles quota (Kong enforced)
- **Search operations**: Unlimited for all users
- **Info operations**: Unlimited for all users

#### Kong Error Response Examples
```typescript
// Handle Kong 429 responses
if (response.status === 429) {
  return {
    error: "Download limit reached. Get your free API key at opensubtitles.com/api or upgrade to premium at mcp.opensubtitles.com/premium",
    upgrade_url: "https://mcp.opensubtitles.com/premium"
  };
}

// Handle Kong 401 responses  
if (response.status === 401) {
  return {
    error: "Invalid API key. Please check your OpenSubtitles API key or get one at opensubtitles.com/api"
  };
}
```

### Deployment Configuration

#### Simple Node.js Deployment
- Standard Node.js application deployment
- Environment-based configuration
- Health check endpoint at `/health`
- No Docker containers needed (unless preferred for deployment)
- Can deploy directly to VPS, cloud platforms, or serverless

#### Environment Variables
```
OPENSUBTITLES_API_BASE=https://api.opensubtitles.com
NODE_ENV=production
PORT=3000
```

**Note**: Minimal configuration needed since Kong handles all API management, rate limiting, and authentication

### Web Interface (Optional)
- Simple landing page at `/` explaining the MCP server
- API documentation at `/docs`
- Usage statistics at `/stats`
- Health check at `/health`

### Business Logic

#### Kong-Managed Rate Limiting
- **Anonymous**: Unlimited search, 0 downloads (Kong enforced)
- **API Key Users**: Full OpenSubtitles API access via their key (Kong enforced)
- **Future Premium**: Server-side API key with higher limits (Kong enforced)

#### User Tiers (Kong Managed)
1. **Anonymous**: Unlimited search, 0 downloads (Kong enforced)
2. **API Key Users**: Full OpenSubtitles API access via their key (Kong enforced)
3. **Future Premium**: Server-side API key with higher limits (Kong enforced)

#### Upgrade Prompts
- When Kong returns 429: "Get unlimited downloads with your OpenSubtitles API key"
- Include registration link: https://www.opensubtitles.com/api
- Future premium messaging: "Get premium access for advanced features at mcp.opensubtitles.com"

### Development & Testing

#### Development Workflow
```bash
# Install dependencies
npm install

# Build the project
npm run build

# Development with auto-rebuild
npm run watch

# Test with MCP Inspector (for debugging)
npm run inspector

# Run evaluation tests
npm test
```

#### Testing with MCP Inspector
Since MCP servers communicate over stdio, debugging can be challenging. Use the MCP Inspector for development:
```bash
npm run inspector
```

#### Evaluation Testing
Create comprehensive tests in `src/evals/evals.ts`:
```typescript
import { z } from 'zod';

export const evaluations = [
  {
    name: 'search_subtitles_by_title',
    description: 'Search for subtitles by movie title',
    tool: 'search_subtitles',
    args: {
      query: 'The Matrix',
      year: 1999,
      languages: 'en'
    },
    expectedSchema: z.object({
      data: z.array(z.object({
        id: z.string(),
        attributes: z.object({
          subtitle_id: z.string(),
          language: z.string(),
          download_count: z.number(),
          files: z.array(z.object({
            file_id: z.number(),
            file_name: z.string()
          }))
        })
      }))
    })
  },
  {
    name: 'search_subtitles_by_hash',
    description: 'Search for subtitles by file hash',
    tool: 'search_subtitles',
    args: {
      moviehash: '8e245d9679d31e12',
      moviebytesize: 12909756
    },
    expectedSchema: z.object({
      data: z.array(z.object({
        id: z.string(),
        attributes: z.object({
          subtitle_id: z.string(),
          language: z.string()
        })
      }))
    })
  },
  {
    name: 'download_subtitle_test',
    description: 'Download subtitle file',
    tool: 'download_subtitle',
    args: {
      subtitle_id: '123456',
      format: 'srt'
    },
    expectedSchema: z.string()
  },
  {
    name: 'calculate_hash_test',
    description: 'Calculate file hash',
    tool: 'calculate_file_hash',
    args: {
      file_path: '/path/to/movie.mkv'
    },
    expectedSchema: z.object({
      hash: z.string(),
      size: z.number()
    })
  }
];
```

### Code Quality Requirements
- **TypeScript**: Strict type checking enabled
- **Zod schemas**: Runtime validation for all API inputs/outputs
- **Error handling**: Comprehensive try-catch blocks with typed errors
- **Logging**: Structured logging with different levels
- **Configuration**: Environment-based config with defaults
- **Documentation**: JSDoc comments for all public methods
- **Testing**: Unit tests and MCP evaluation tests

### Security Considerations
- Input validation for all parameters
- API key handling (never log or expose user keys)
- Kong handles rate limiting and abuse prevention
- File path validation for hash calculation
- CORS handling if web interface needed
- Trust Kong's security layer for API protection

### Example Usage
```typescript
// MCP client would call:
// Search by title and year
await mcpClient.callTool("search_subtitles", {
    query: "The Matrix",
    year: 1999,
    languages: "en"
});

// Search by exact file hash
await mcpClient.callTool("search_subtitles", {
    moviehash: "8e245d9679d31e12",
    moviebytesize: 12909756
});

// Search for TV show episode
await mcpClient.callTool("search_subtitles", {
    parent_imdb_id: 944947,
    season_number: 1,
    episode_number: 5,
    languages: "en"
});

// Download subtitle
await mcpClient.callTool("download_subtitle", {
    subtitle_id: "123456",
    format: "srt"
});

// Calculate hash for file matching
await mcpClient.callTool("calculate_file_hash", {
    file_path: "/path/to/movie.mkv"
});

// Via npx for testing:
npx @opensubtitles/mcp-server
```

### Claude Desktop Integration
Users can easily add to their Claude Desktop config:
```json
{
  "mcpServers": {
    "opensubtitles": {
      "command": "npx",
      "args": ["-y", "@opensubtitles/mcp-server"]
      // Optional: Add your personal API key for unlimited downloads
      // "env": {
      //   "OPENSUBTITLES_USER_KEY": "your_personal_api_key_here"
      // }
    }
  }
}
```

## Deliverables
1. **MCP-Compliant Server**: Complete TypeScript implementation following June 2025 specification
2. **Security-First Design**: OAuth 2.1, PKCE, Resource Indicators, and input validation
3. **NPM Package**: Production-ready package for `@opensubtitles/mcp-server` distribution
4. **Kong Integration**: Seamless integration with existing Kong gateway infrastructure
5. **Security Documentation**: Comprehensive security implementation guide
6. **Testing Suite**: MCP evaluation tests, security tests, and integration tests
7. **Deployment Guide**: Production deployment instructions with security hardening
8. **Monitoring & Logging**: Structured logging for security monitoring and audit trails

Create a production-ready, security-compliant MCP server that follows the latest MCP specifications while leveraging your existing Kong infrastructure. The server should demonstrate security best practices and provide a foundation for future MCP implementations in your ecosystem.